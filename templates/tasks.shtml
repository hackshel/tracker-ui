<!--#include file="base.shtml" -->

<!-- 自定义操作按钮-->
<div id="toolbar" class="form-inline pull-left">
    <div class="form-group">
        <button id="add_torrent" type="button" class="btn btn-primary" data-bs-toggle="modal"
            data-bs-target="#uploadModal">上传种子文件(.torrent)</button>
        <!--
        <select id="navStatus" class="form-control selectpicker">
            <option value="" selected="selected">状态</option>
            <option value="{{ status }}">{{ status_display }}</option>
        </select>
        -->
    </div>

    <div class='form-group'>
        <div id="reservation" class="form-control"
            style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">
            <i class="fa fa-calendar"></i>&nbsp;
            <span></span> <i class="fa fa-caret-down"></i>
        </div>
    </div>
</div>
<!-- 审核列表的表格-->
<div class="table-responsive">
    <table id="sqlaudit-list" data-toggle="table" class="table table-striped table-hover"
        style="table-layout:inherit;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;"></table>
</div>
<!-- 日志信息-->
<div class="modal fade" id="logs">
    <div class="modal-dialog">
        <div class="modal-content message_align">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                        aria-hidden="true">×</span></button>
                <h4 class="modal-title text-danger">工单日志</h4>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table id="log-list" data-toggle="table" class="table table-striped table-hover"
                        style="table-layout:inherit;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">
                    </table>
                </div>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

<!-- 上传文件Modal 结构 -->
<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">上传种子文件</h5>
                <!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
            </div>
            <div class="modal-body">
                <!-- 上传表单 -->
                <form id="torrentUploadForm" action="" method="POST" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="torrentFile" class="form-label">选择种子文件</label>
                        <input type="file" class="form-control" id="torrentFile" name="torrent" accept=".torrent"
                            required>
                    </div>

                    <button type="submit" class="btn btn-success" id="upload_torrent">上传</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--#include file="contents.shtml"-->
<link href="/static/daterangepicker/css/daterangepicker.css" rel="stylesheet" type="text/css" />
<script src="/static/daterangepicker/js/moment.min.js"></script>
<script src="/static/daterangepicker/js/daterangepicker.js"></script>
<script src="/static/bootstrap-table/js/bootstrap-table-export.min.js"></script>
<script src="/static/bootstrap-table/js/tableExport.min.js"></script>
<script>
    // 初始化时间控件
    $(function () {
        let start = moment().subtract(29, 'days');
        let end = moment();

        function cb(start, end) {
            if (start.isValid() && end.isValid()) {
                $('#reservation span').html(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
            } else {
                $('#reservation span').html('全部数据');
            }
        }

        $('#reservation').daterangepicker({
            startDate: start,
            endDate: end,
            showDropdowns: true,
            locale: {
                format: "YYYY-MM-DD",// 显示格式
                separator: " / ",// 两个日期之间的分割线
                // 中文化
                applyLabel: "确定",
                cancelLabel: "取消",
                fromLabel: "开始",
                toLabel: "结束",
                customRangeLabel: "自定义",
                daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                monthNames: ["一月", "二月", "三月", "四月", "五月", "六", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                firstDay: 1
            },
            ranges: {
                "全部": [null, null],
                "今日": [moment().startOf('day'), moment()],
                "昨日": [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                "最近7日": [moment().subtract('days', 6), moment()],
                "最近30日": [moment().subtract('days', 29), moment()],
                "本月": [moment().startOf("month"), moment().endOf("month")],
                "上个月": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
            }
        }, cb).on('apply.daterangepicker', function (ev, picker) {
            get_workflow_list()
        });
        cb(start, end);
    });

</script>
<script>
    //获取种子列表
    function get_workflow_list() {
        //采取异步请求
        //初始化table
        token = localStorage.getItem("token");
        $('#sqlaudit-list').bootstrapTable('destroy').bootstrapTable({
            escape: true,
            method: 'GET',
            contentType: "application/json",
            url: "/api/v1/torrent/list",
            striped: true,                      //是否显示行间隔色
            cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
            pagination: true,                   //是否显示分页（*）
            sortable: true,                     //是否启用排序
            sortOrder: "asc",                   //排序方式
            sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
            pageNumber: 1,                      //初始化加载第一页，默认第一页,并记录
            pageSize: 20,                     //每页的记录行数（*）
            pageList: [20, 30, 50, 100],       //可供选择的每页的行数（*）
            showExport: true,                   //是否显示导出按钮
            exportOptions: {
                fileName: 'workflow'  //文件名称设置
            },
            ajaxOptions: {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            },
            search: true,                      //是否显示表格搜索
            strictSearch: false,                //是否全匹配搜索
            showColumns: true,                  //是否显示所有的列（选择显示的列）
            showRefresh: true,                  //是否显示刷新按钮
            minimumCountColumns: 2,             //最少允许的列数
            clickToSelect: true,                //是否启用点击选中行
            uniqueId: "id",                     //每一行的唯一标识，一般为主键列
            showToggle: true,                   //是否显示详细视图和列表视图的切换按钮
            cardView: false,                    //是否显示详细视图
            detailView: false,                  //是否显示父子表
            locale: 'zh-CN',                    //本地化
            toolbar: "#toolbar",               //指明自定义的toolbar
            queryParamsType: 'limit',
            //请求服务数据时所传参数
            queryParams:
                function (params) {
                    let start_date = $("#reservation").data('daterangepicker').startDate;
                    let end_date = $("#reservation").data('daterangepicker').endDate;
                    if (start_date.isValid() && end_date.isValid()) {
                        start_date = start_date.format('YYYY-MM-DD');
                        end_date = end_date.format('YYYY-MM-DD')
                    } else {
                        start_date = '';
                        end_date = ''
                    }
                    return {
                        limit: params.limit,
                        offset: params.offset,
                        navStatus: $("#navStatus").val(),
                        instance_id: $("#instance_id").val(),
                        group_id: $("#group_id").val(),
                        start_date: start_date,
                        end_date: end_date,
                        search: params.search
                    }
                },
            columns: [{
                title: 'DCP名称',
                field: 'name',
                formatter: function (value, row, index) {
                    var span = document.createElement('span');
                    span.setAttribute('title', value);
                    span.setAttribute('id', row.torrent_id);
                    span.innerHTML = value;
                    /*
                    if (value.length > 20) {
                        span.innerHTML = "<a href=\"/detail/" + row.id + "/\">" + value ;
                        +"</a>";
                    } else {
                        span.innerHTML = "<a href=\"/detail/" + row.id + "/\">" + value + "</a>";
                    }
                    */

                    span.innerHTML = '<a class="dl_torrent" href="#" torrent_id= "' + row.torrent_id + '" info_hash="' + row.info_hash + '">' + value + '</a>';
                    return span.outerHTML;
                }
            }, {
                title: 'info Hash',
                field: 'info_hash'
            }, {
                title: 'filename',
                field: 'filename'
            }, {
                title: 'DCP SIZE',
                field: 'dcpsize',
            }, {
                title: '类型',
                field: 'dcp_type',
                formatter: function (value, row, index) {
                    if (String(value) === '0') {
                        return '其他'
                    } else if (String(value) === 'single') {
                        return '标准DCP'
                    } else if (String(value) === '2') {
                        return 'Share DCP'
                    } else if (String(value) === '3') {
                        return 'Combo'
                    }
                }
            }, {
                title: '发起人',
                field: 'user_id'
            }, {
                title: '状态',
                field: 'pices_count',
                formatter: function (value, row, index) {
                    return sqlworkflowStatus_formatter(value)
                }
            }, {
                title: '发起时间',
                field: 'added_time'
            }, {
                title: '更新时间',
                field: 'last_action'
            }, /*{
                    title: '操作',
                    field: 'operation',
                    formatter: function (value, row, index) {
                        return "<button class=\"btn btn-info btn-xs\" workflow_id=\"" + row.id + "\"\n" + "onclick=\"getLog(this)\" >操作日志\n" + "</button>"
                    }
                }*/],
            onLoadSuccess: function () {
            },
            onLoadError: onLoadErrorCallback,
            onSearch: function (e) {
                //传搜索参数给服务器
                queryParams(e)
            },
            responseHandler: function (res) {
                //在ajax获取到数据，渲染表格之前，修改数据源
                return res;
            }
        });

    }

    // 获取操作日志
    function getLog(obj) {
        var workflow_id = $(obj).attr("workflow_id");
        var workflow_type = 2;
        $.ajax({
            type: "post",
            url: "/workflow/log/",
            dataType: "json",
            data: {
                workflow_id: workflow_id,
                workflow_type: workflow_type,
            },
            complete: function () {
            },
            success: function (data) {
                //初始化table
                $('#logs').modal('show');
                $('#log-list').bootstrapTable('destroy').bootstrapTable({
                    escape: true,
                    striped: true,                      //是否显示行间隔色
                    cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                    pagination: false,                   //是否显示分页（*）
                    sortable: false,                     //是否启用排序
                    sortOrder: "asc",                   //排序方式
                    sidePagination: "client",           //分页方式：client客户端分页，server服务端分页（*）
                    pageNumber: 1,                      //初始化加载第一页，默认第一页,并记录
                    pageSize: 14,                     //每页的记录行数（*）
                    pageList: [20, 30, 50, 100],       //可供选择的每页的行数（*）
                    search: false,                      //是否显示表格搜索
                    strictSearch: false,                //是否全匹配搜索
                    showColumns: false,                  //是否显示所有的列（选择显示的列）
                    showRefresh: false,                  //是否显示刷新按钮
                    minimumCountColumns: 2,             //最少允许的列数
                    clickToSelect: false,                //是否启用点击选中行
                    uniqueId: "id",                     //每一行的唯一标识，一般为主键列
                    showToggle: false,                   //是否显示详细视图和列表视图的切换按钮
                    cardView: false,                    //是否显示详细视图
                    detailView: false,                  //是否显示父子表
                    locale: 'zh-CN',                    //本地化
                    data: data.rows,
                    columns: [{
                        title: '操作',
                        field: 'operation_type_desc'
                    }, {
                        title: '操作人',
                        field: 'operator_display'
                    }, {
                        title: '操作时间',
                        field: 'operation_time'
                    }, {
                        title: '操作信息',
                        field: 'operation_info'
                    }],
                    onLoadSuccess: function () {
                    },
                    onLoadError: onLoadErrorCallback
                });
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(errorThrown);
            }
        })
    }

    //筛选变动自动刷新
    $("#navStatus").change(function () {
        get_workflow_list();
    });

    $("#instance_id").change(function () {
        get_workflow_list();
    });

    $("#group_id").change(function () {
        get_workflow_list();
    });

    $("#sqlaudit-list").on('click', 'tbody tr td span a.dl_torrent', function (e) {
        console.log("work here ~~~~");
        e.preventDefault();
        e.stopPropagation();
        console.log(e);

        const torrentId = $(this).attr('torrent_id');
        const infoHash = $(this).attr('info_hash');
        const token = localStorage.getItem('token');
        const dl_url = "/api/v1/torrent/download";
        const fileName = $(this).text();

        const headers = {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        };

        const payload = {
            torrent_id: torrentId,
            info_hash: infoHash
        };
        const queryParams = new URLSearchParams(payload).toString();
        // console.log(queryParams)
        const url = dl_url + '?' + queryParams
        console.log(url)

        fetch(url, {
            method: 'GET',
            headers: headers
        })
            .then(res => {
                if (!res.ok) {
                    throw new Error("下载失败，状态码：" + res.status);
                }
                return res.blob(); // 获取文件内容
            })
            .then(blob => {
                // 3. 创建下载链接并触发下载
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileName; // 设置下载文件名
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            })
            .catch(err => {
                console.error('下载出错：', err);
                alert('文件下载失败，请检查登录状态或网络');
            });
    });

    $("#add_torrent").on('click', function (e) {
        $("#uploadModal").modal('show');
    });

    $("#torrentUploadForm").on("submit", function (e) {

        console.log("begin ~~~");
        e.preventDefault();
        var formData = new FormData(this);
        console.log(formData);

        tokne = localStorage.getItem("token");
        $.ajax({
            url: '/api/v1/torrent/upload', // 服务器上传接口
            type: 'POST',
            data: formData,
            headers: {
                'Authorization': 'Bearer ' + token,
            },
            processData: false, // 防止 jQuery 自动处理
            contentType: false, // 不设置 contentType
            success: function (response) {
                // 上传成功后关闭 Modal，并处理服务器返回的数据
                alert('文件上传成功');
                $('#uploadModal').modal('hide');

                setTimeout(function () {
                    location.reload(); // 刷新整个页面
                }, 500); // 等待 modal 动画关闭后再刷新
            },
            error: function (err) {
                // 上传失败后，处理错误
                alert('文件上传失败');
            }
        });
    });


    //初始化数据
    $(document).ready(function () {
        get_workflow_list();
    });
</script>






<!--#include file="footer.shtml"-->